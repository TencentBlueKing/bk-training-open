(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
    typeof define === 'function' && define.amd ? define(['exports'], factory) :
    (global = global || self, factory(global.library = {}));
}(this, function (exports) { 'use strict';

    var enUS = {
      bk: {
        lang: 'en-US',
        datePicker: {
          selectDate: 'Select Date',
          selectTime: 'Select Time',
          clear: 'Clear',
          ok: 'OK',
          weekdays: {
            sun: 'Sun',
            mon: 'Mon',
            tue: 'Tue',
            wed: 'Wed',
            thu: 'Thu',
            fri: 'Fri',
            sat: 'Sat'
          },
          hour: 'Hour',
          min: 'Minute',
          sec: 'Second',
          toNow: 'Now'
        },
        dialog: {
          ok: 'OK',
          cancel: 'CANCEL'
        },
        exception: {
          403: 'Forbidden',
          404: 'Not Found',
          500: 'Internal Server Error',
          building: 'Building',
          empty: 'No Data',
          searchEmpty: 'Search Is Empty',
          login: 'Please log in to Blueking'
        },
        form: {
          validPath: 'Please configure a valid path'
        },
        input: {
          input: 'Please input'
        },
        imageViewer: {
          loadFailed: 'Picture failed to load.',
          quitTips: 'ESC Can Exit fullscreen'
        },
        notify: {
          showMore: 'Show more'
        },
        select: {
          selectAll: 'Select All',
          pleaseselect: 'Please select',
          searchPlaceholder: 'Input keyword to search',
          dataEmpty: 'No options',
          searchEmpty: 'No matched data'
        },
        sideslider: {
          title: 'Title'
        },
        tagInput: {
          placeholder: 'Please input and press ENTER to finish'
        },
        transfer: {
          left: 'Left',
          total: ' (Total {total})',
          addAll: 'Add All',
          emptyContent: 'No Data',
          right: 'Right',
          removeAll: 'Remove All',
          emptySelected: 'No Selected',
          searchPlaceholder: 'Input keyword to search'
        },
        tree: {
          emptyText: 'No Data'
        },
        steps: {
          step1: 'Step1',
          step2: 'Step2',
          step3: 'Step3'
        },
        uploadFile: {
          drag: 'Try dragging an file here or',
          click: 'click to upload',
          uploadDone: 'Upload finished',
          uploading: 'uploading',
          reupload: 'reupload',
          replace: 'replace',
          uploadFailed: 'upload failed',
          fileExceedMsg: '{fileName} cannot exceed {size} MB',
          invalidFileName: 'FileName is not valid',
          invalidImageFormat: 'Only upload JPG | PNG | JPEG',
          imageExceedMsg: 'Image Size cannot exceed {imgSize} MB',
          uploadLabel: 'Upload Files'
        },
        navigation: {
          headerTitle: 'Program name'
        },
        searchSelect: {
          placeholder: 'Please enter',
          emptyText: 'Included key worth filtering query must have a value',
          condition: 'Or',
          remoteEmptyText: 'Query no data',
          remoteLoadingText: 'Loading...',
          tips: 'multiple keywords separate by |',
          ok: 'OK',
          cancel: 'Cancel'
        },
        table: {
          emptyText: 'No Data',
          sumText: 'Summary',
          setting: {
            title: 'Table Settings',
            fields: {
              title: 'Displaying Fields Setting',
              subtitle: '（{max} fiels most）',
              selectAll: 'All'
            },
            lineHeight: {
              title: 'Table Line Height',
              small: 'small',
              medium: 'medium',
              large: 'large'
            },
            options: {
              ok: 'OK',
              cancel: 'Cancel'
            }
          },
          confirm: 'Confirm',
          reset: 'Reset',
          all: 'All',
          filter: {
            placeholder: 'Please input keyword',
            empty: 'No matched data'
          }
        },
        bigTree: {
          emptyText: 'No Data'
        },
        message: {
          copy: 'copy',
          copied: 'copied'
        }
      }
    };

    exports.default = enUS;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
