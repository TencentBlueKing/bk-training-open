"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _path = require("path");

var _helperModuleImports = require("@babel/helper-module-imports");

const transformName = name => {
  if (!name) {
    return '';
  }

  name = name.replace(/^(bk)*/g, '');
  return name.replace(/[A-Z]/g, (ch, index) => {
    if (index === 0) {
      return ch.toLowerCase();
    }

    return '-' + ch.toLowerCase();
  });
};

const dontNeedCssFileModName = ['bkTransferDom', transformName('bkTransferDom'), 'bkClickoutside', transformName('bkClickoutside'), 'bkCheckboxGroup', transformName('bkCheckboxGroup'), 'bkFormItem', transformName('bkFormItem'), 'bkOption', transformName('bkOption'), 'bkOptionGroup', transformName('bkOptionGroup'), 'bkRadioGroup', transformName('bkRadioGroup'), 'bkTabPanel', transformName('bkTabPanel'), 'bkTableColumn', transformName('bkTableColumn'), 'bkAnimateNumber', transformName('bkAnimateNumber'), 'bkBreadcrumbItem', transformName('bkBreadcrumbItem'), 'locale', transformName('locale'), 'lang', transformName('lang'), 'localeMixin', transformName('localeMixin'), 'popManager', transformName('popManager'), 'zIndexManager', transformName('zIndexManager'), 'deepmerge', transformName('deepmerge'), 'svg-icon', transformName('svg-icon')];
const specialModName = {
  bkDatePicker: ['date-picker.min.css', 'date-picker.base.min.css'],
  [`${transformName('bkDatePicker')}`]: ['date-picker.min.css', 'date-picker.base.min.css'],
  bkTimePicker: ['time-picker.min.css', 'date-picker.base.min.css'],
  [`${transformName('bkTimePicker')}`]: ['time-picker.min.css', 'date-picker.base.min.css'],
  bkSearchSelect: ['search-select.min.css', 'search-select-menu.min.css'],
  [`${transformName('bkSearchSelect')}`]: ['search-select.min.css', 'search-select-menu.min.css'],
  bkRate: ['rate.min.css', 'star.min.css'],
  [`${transformName('bkRate')}`]: ['rate.min.css', 'star.min.css'],
  bkIcon: ['common.min.css'],
  [`${transformName('bkIcon')}`]: ['common.min.css'],
  tippy: ['common.min.css'],
  [`${transformName('tippy')}`]: ['popover.min.css'],
  bkTableSettingContent: ['table.min.css'],
  [`${transformName('bkTableSettingContent')}`]: ['table.min.css']
};
const directivesMap = {
  bkTooltips: 'tooltips',
  bkClickoutside: 'clickoutside',
  bkOverflowTips: 'overflow-tips',
  bkTransferDom: 'transfer-dom'
};
const mixinsMap = {
  localeMixin: 'locale'
};
const localeMap = {
  lang: 'lang'
};

const addCommonStyle = (path, source, notCommonCssList, baseLibName) => {
  if (source.indexOf(baseLibName) === 0 && notCommonCssList.indexOf(source) < 0) {
    (0, _helperModuleImports.addSideEffect)(path, `${baseLibName}/lib/ui/common.min.css`);
  }
};

const addComponentStyle = (file, transformedName, baseLibName) => {
  const list = specialModName[transformedName];

  if (list && list.length) {
    list.forEach(item => {
      (0, _helperModuleImports.addSideEffect)(file.path, `${baseLibName}/lib/ui/${item}`);
    });
  } else {
    (0, _helperModuleImports.addSideEffect)(file.path, `${baseLibName}/lib/ui/${transformedName}.min.css`);
  }
};

const createImportDefaultSpecifier = (modName, file, curState, baseLibName) => {
  if (!curState.cache[modName]) {
    let importedSource = '';

    if (directivesMap[modName]) {
      importedSource = `${baseLibName}/lib/directives/${directivesMap[modName]}`;
    } else if (mixinsMap[modName]) {
      importedSource = `${baseLibName}/lib/${mixinsMap[modName]}`;
    } else if (localeMap[modName]) {
      importedSource = `${baseLibName}/lib/locale/${localeMap[modName]}`;
    } else {
      importedSource = `${baseLibName}/lib/${modName === 'localeMixin' ? modName : transformName(modName)}`;
    }

    curState.cache[modName] = (0, _helperModuleImports.addDefault)(file.path, importedSource, {
      nameHint: modName
    });
  }

  return Object.assign({}, curState.cache[modName]);
};

function _default({
  types: t
}) {
  let baseLibName = '';
  const states = {};
  const stateKey = `$importKey${+new Date()}`;

  const getCurState = state => {
    if (!states[stateKey]) {
      states[stateKey] = {};
    }

    return states[stateKey];
  };

  return {
    visitor: {
      Program: {
        enter(path, state) {
          baseLibName = state.opts && state.opts.baseLibName || 'bk-magic-vue';
          const curState = getCurState(state);
          curState.cache = Object.create(null);
          curState.importSpecified = Object.create(null);
          curState.waitRemovePathList = [];
        },

        exit(path, state) {
          getCurState(state).waitRemovePathList.forEach(p => !p.removed && p.remove());
        }

      },

      ImportDeclaration(path, state) {
        const node = path.node;

        if (!node) {
          return;
        }

        const file = path && path.hub && path.hub.file || state && state.file;
        const modName = node.source.value;

        if (modName === baseLibName) {
          const curState = getCurState(state);
          const specifiers = node.specifiers;
          const len = specifiers.length;

          if (len === 0) {
            (0, _helperModuleImports.addSideEffect)(file.path, `${baseLibName}/dist/bk-magic-vue.min.css`);
            return;
          }

          if (len === 1) {
            const firstSpecifier = node.specifiers[0];

            if (t.isImportDefaultSpecifier(firstSpecifier)) {
              (0, _helperModuleImports.addSideEffect)(file.path, `${baseLibName}/dist/bk-magic-vue.min.css`);
              return;
            }
          }

          for (let i = 0; i < len; i++) {
            const spec = specifiers[i];

            if (t.isImportSpecifier(spec)) {
              curState.importSpecified[spec.local.name] = spec.imported.name;
            }
          }

          curState.waitRemovePathList.push(path);
        } else {
          if (modName.indexOf(baseLibName) >= 0 && ((0, _path.extname)(modName) === '.js' || (0, _path.extname)(modName) === '')) {
            if (dontNeedCssFileModName.indexOf((0, _path.basename)(modName)) < 0) {
              addComponentStyle(file, (0, _path.basename)(modName), baseLibName);
              const notCommonCssList = [`${baseLibName}/lib/ui/common.css`, `${baseLibName}/lib/ui/common.min.css`, `${baseLibName}/lib/ui/bk-magic-vue.css`, `${baseLibName}/lib/ui/bk-magic-vue.min.css`, `${baseLibName}/dist/bk-magic-vue.css`, `${baseLibName}/dist/bk-magic-vue.min.css`];
              addCommonStyle(file.path, modName, notCommonCssList, baseLibName);
            }
          }
        }
      },

      Property(path, state) {
        const curState = getCurState(state);
        const node = path.node;

        if (!t.isIdentifier(node.value)) {
          return;
        }

        if (curState.importSpecified[node.value.name] && path.scope.hasBinding(node.value.name) && path.scope.getBinding(node.value.name).path.type === 'ImportSpecifier') {
          const file = path && path.hub && path.hub.file || state && state.file;
          node.value = createImportDefaultSpecifier(node.value.name, file, curState, baseLibName);
        }
      },

      VariableDeclarator(path, state) {
        const curState = getCurState(state);
        const node = path.node;

        if (!t.isIdentifier(node.init)) {
          return;
        }

        if (curState.importSpecified[node.init.name] && path.scope.hasBinding(node.init.name) && path.scope.getBinding(node.init.name).path.type === 'ImportSpecifier') {
          const file = path && path.hub && path.hub.file || state && state.file;
          node.init = createImportDefaultSpecifier(node.init.name, file, curState, baseLibName);
        }
      },

      ExportDefaultDeclaration(path, state) {
        const curState = getCurState(state);
        const node = path.node;
        const props = ['declaration'];

        for (let i = 0; i < props.length; i++) {
          const prop = props[i];

          if (!t.isIdentifier(node[prop])) {
            continue;
          }

          if (curState.importSpecified[node[prop].name]) {
            const file = path && path.hub && path.hub.file || state && state.file;
            node[prop] = createImportDefaultSpecifier(curState.importSpecified[node[prop].name], file, curState, baseLibName);
          }
        }
      },

      LogicalExpression(path, state) {
        const curState = getCurState(state);
        const node = path.node;
        const props = ['left', 'right'];

        for (let i = 0; i < props.length; i++) {
          const prop = props[i];

          if (!t.isIdentifier(node[prop])) {
            continue;
          }

          if (curState.importSpecified[node[prop].name]) {
            const file = path && path.hub && path.hub.file || state && state.file;
            node[prop] = createImportDefaultSpecifier(curState.importSpecified[node[prop].name], file, curState, baseLibName);
          }
        }
      },

      ConditionalExpression(path, state) {
        const curState = getCurState(state);
        const node = path.node;
        const props = ['test', 'consequent', 'alternate'];

        for (let i = 0; i < props.length; i++) {
          const prop = props[i];

          if (!t.isIdentifier(node[prop])) {
            continue;
          }

          if (curState.importSpecified[node[prop].name]) {
            const file = path && path.hub && path.hub.file || state && state.file;
            node[prop] = createImportDefaultSpecifier(curState.importSpecified[node[prop].name], file, curState, baseLibName);
          }
        }
      },

      BinaryExpression(path, state) {
        const curState = getCurState(state);
        const node = path.node;
        const props = ['left', 'right'];

        for (let i = 0; i < props.length; i++) {
          const prop = props[i];

          if (!t.isIdentifier(node[prop])) {
            continue;
          }

          if (curState.importSpecified[node[prop].name]) {
            const file = path && path.hub && path.hub.file || state && state.file;
            node[prop] = createImportDefaultSpecifier(curState.importSpecified[node[prop].name], file, curState, baseLibName);
          }
        }
      },

      MemberExpression(path, state) {
        const curState = getCurState(state);
        const node = path.node;

        if (!node.object || !node.object.name) {
          return;
        }

        const file = path && path.hub && path.hub.file || state && state.file;

        if (curState.importSpecified[node.object.name]) {
          node.object = createImportDefaultSpecifier(curState.importSpecified[node.object.name], file, curState, baseLibName);
        }
      },

      ArrayExpression(path, state) {
        const curState = getCurState(state);
        const node = path.node;
        const file = path && path.hub && path.hub.file || state && state.file;
        const props = node.elements.map((elem, index) => index);

        for (let i = 0; i < props.length; i++) {
          const prop = props[i];

          if (!t.isIdentifier(node.elements[prop])) {
            continue;
          }

          if (curState.importSpecified[node.elements[prop].name]) {
            node.elements[prop] = createImportDefaultSpecifier(curState.importSpecified[node.elements[prop].name], file, curState, baseLibName);
          }
        }
      },

      CallExpression(path, state) {
        const curState = getCurState(state);
        const node = path.node;
        const file = path && path.hub && path.hub.file || state && state.file;

        if (t.isIdentifier(node.callee) && curState.importSpecified[node.callee.name]) {
          node.callee = createImportDefaultSpecifier(curState.importSpecified[node.callee.name], file, curState, baseLibName);
        }

        const props = node.arguments.map((elem, index) => index);

        for (let i = 0; i < props.length; i++) {
          const prop = props[i];

          if (!t.isIdentifier(node.arguments[prop])) {
            continue;
          }

          if (curState.importSpecified[node.arguments[prop].name] && path.scope.hasBinding(node.arguments[prop].name) && path.scope.getBinding(node.arguments[prop].name).path.type === 'ImportSpecifier') {
            node.arguments[prop] = createImportDefaultSpecifier(curState.importSpecified[node.arguments[prop].name], file, curState, baseLibName);
          }
        }
      },

      NewExpression(path, state) {
        const curState = getCurState(state);
        const node = path.node;
        const file = path && path.hub && path.hub.file || state && state.file;

        if (t.isIdentifier(node.callee) && curState.importSpecified[node.callee.name]) {
          node.callee = createImportDefaultSpecifier(curState.importSpecified[node.callee.name], file, curState, baseLibName);
        }

        const props = node.arguments.map((elem, index) => index);

        for (let i = 0; i < props.length; i++) {
          const prop = props[i];

          if (!t.isIdentifier(node.arguments[prop])) {
            continue;
          }

          if (curState.importSpecified[node.arguments[prop].name] && path.scope.hasBinding(node.arguments[prop].name) && path.scope.getBinding(node.arguments[prop].name).path.type === 'ImportSpecifier') {
            node.arguments[prop] = createImportDefaultSpecifier(curState.importSpecified[node.arguments[prop].name], file, curState, baseLibName);
          }
        }
      },

      IfStatement(path, state) {
        const curState = getCurState(state);
        const node = path.node;

        if (curState.importSpecified[node.test.name]) {
          const file = path && path.hub && path.hub.file || state && state.file;
          node.test = createImportDefaultSpecifier(curState.importSpecified[node.test.name], file, curState, baseLibName);
        }
      },

      ExpressionStatement(path, state) {
        const curState = getCurState(state);
        const node = path.node;

        if (!t.isAssignmentExpression(node.expression)) {
          return;
        }

        const file = path && path.hub && path.hub.file || state && state.file;
        const props = ['right'];

        for (let i = 0; i < props.length; i++) {
          const prop = props[i];

          if (!t.isIdentifier(node.expression[prop])) {
            continue;
          }

          if (curState.importSpecified[node.expression[prop].name]) {
            node.expression[prop] = createImportDefaultSpecifier(curState.importSpecified[node.expression[prop].name], file, curState, baseLibName);
          }
        }
      },

      ReturnStatement(path, state) {
        const curState = getCurState(state);
        const node = path.node;

        if (!node.argument || !t.isIdentifier(node.argument)) {
          return;
        }

        if (curState.importSpecified[node.argument.name]) {
            const file = path && path.hub && path.hub.file || state && state.file;
            node.argument = createImportDefaultSpecifier(node.argument.name, file, curState, baseLibName);
          }
      }

    }
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,